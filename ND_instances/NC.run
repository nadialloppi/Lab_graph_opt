
model parameterDefinition.mod;
data demand.dat;
data topology.dat;

param Tic_original;
param Toc_original;
param Tic_Greedy1;
param Toc_Greedy1;
param Tic_Greedy2;
param Toc_Greedy2;
param Tic_LRelax;
param Toc_LRelax;

option solver cplex;

problem Original: x, l, capacity, maxArcs, flowBalance, varConsistency;

problem Heuristics1: u, Cost, flowBalance_SP;
problem Heuristics: u, Cost, flowBalance_SP, maxArcs_SP;

problem LagrRelaxation: x, Obj_LR, flowBalance, varConsistency;


printf "-------------------------------Original ------------------------------\n";


let Tic_original := _ampl_elapsed_time;

solve Original;

let Toc_original := _ampl_elapsed_time;

display l;

param LB default max{k in K} d[k];
display LB;

param UB1 default 0;
param UB2 default 0;
param OPT default 0; 



let OPT:= l;
# ------------------------------------------------------------------------------

printf "-------------------------------Greedy 1------------------------------\n";

let Tic_Greedy1 := _ampl_elapsed_time;

for {k in K} {
	let k_bar := k;
	
	for {(i, j) in A}
		let c[i, j] := 1;	
	solve Heuristics1;

}

let lambda := max {(i, j) in A} sum{k in K} u[i, j, k] * d[k];


let Toc_Greedy1 := _ampl_elapsed_time;

let UB1:= lambda;

printf "Upperbound, shortest path:\n";
display UB1; 

printf "-------------------------------Greedy 2------------------------------\n";

set K_assigned within K default {};
param d_max default 0;
param cap_res{A} default 0;

let Tic_Greedy2 := _ampl_elapsed_time;

# for {(i, j) in A} let c[i, j] := 0;	
let d_max := max{k in K} d[k];
let lambda := d_max;

repeat {
	let d_max := max{k in {K diff K_assigned}} d[k];

	for {k in {K diff K_assigned}} {
		if (d[k] = d_max) then {
			let k_bar := k;
			
			
			for {(i, j) in A}{
				let cap_res[i, j] := lambda - sum{kk in K_assigned} u[i, j, kk]*d[kk];
				let c[i, j] := if (cap_res[i,j] >= d[k_bar]) then 0
									else d[k_bar]-cap_res[i, j];
			}
			let K_assigned := K_assigned union {k_bar};
			solve Heuristics;
			let lambda := max {(i, j) in A} sum{kk in K_assigned} u[i, j, kk] * d[kk]; # assumo sia tutto interp (dk)
	}}
} until sum{kk in {K diff K_assigned}} (1) = 0;

let Toc_Greedy2 := _ampl_elapsed_time;

let UB2:= lambda;

printf "Upperbound, second greedy:\n";
display UB2; 


printf "-------------------------------Lagrangian Relaxation------------------------------\n";

param LB_LR default 0;

param UB_LR;

param norma default 1;

param temp default 0;

let step := 1;

let Tic_LRelax := _ampl_elapsed_time;

for {iter in 1..10} {
  
  # Solve the Lagrangian Relaxation
  solve LagrRelaxation;
  
  # Check for feasibility: 
  # update UB_LR if feasible
  let temp:= 0;
  for {k in K} {
  	if (sum {(i, j) in A} x[i, j, k] > h) then {
  		let temp:=1;
  		break;
  }}
  if (temp=0) then let UB_LR:= Obj_LR;

  # Update step size
  let step:= 0.995*step;
 
  # Update LB_LR 
  let LB_LR := Obj_LR;

  # Update norma
  let norma:= ( sum{k in K} (sum {(i, j) in A} x[i, j, k] - h)^2) ^ (1/2);
	
	  
  # Update multipliers
  
  # Memorize old values
  for {k in K}
  	let mu_old[k] := mu[k];

  # Calculate new values
  for {k in K}
  	let mu[k]:= max(0, mu_old[k] + step*(sum {(i, j) in A} x[i, j, k] - h)/norma);
  	
}
let Toc_LRelax := _ampl_elapsed_time;

display LB_LR;

printf"********************** TO SUM UP **********************\n";
display LB, OPT, UB1, UB2, LB_LR;
display (Toc_original - Tic_original), (Toc_Greedy1-Tic_Greedy1), (Toc_Greedy2-Tic_Greedy2), (Toc_LRelax-Tic_LRelax);






